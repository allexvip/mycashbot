import logging
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from dotenv import dotenv_values
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.web_app_info import WebAppInfo
import os

config = dotenv_values("config.env")

API_TOKEN = config['TELEGRAM_BOT_API_KEY']

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

sql_init = False

if not os.path.exists('mycash.db'):
    sql_init = True
conn = sqlite3.connect('mycash.db')
cur = conn.cursor()

if sql_init:
    with open("migrations/2022_06_18_db_init.sql", "r") as file:
        mass = file.read()
        for sql_item in mass.split(';'):
            if len(sql_item) > 5:
                cur.execute(sql_item)
                conn.commit()


def get_keyboard():
    webAppTest = types.WebAppInfo("https://telegram.mihailgok.ru")  # —Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton(text="–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", web_app=webAppTest, url="https://telegram.mihailgok.ru")
    )


def webAppKeyboard():  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å webapp –∫–Ω–æ–ø–∫–æ–π
    keyboard = types.ReplyKeyboardMarkup(row_width=1)  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    webAppTest = types.WebAppInfo("https://telegram.mihailgok.ru")  # —Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
    one_butt = types.KeyboardButton(text="–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", web_app=webAppTest)  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
    keyboard.add(one_butt)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    return keyboard  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


async def send_to_db(sql):
    cur.execute(sql)
    conn.commit()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start`
    """
    await send_to_db(f"""INSERT INTO log (`chatid`, `message`,`created`) 
           VALUES('{message.from_user.id}', '{message.text}',datetime('now'));""")
    await send_to_db(f"""INSERT OR IGNORE INTO USER (`chatid`,`username`,`first_name`,`last_name`,`created`,`upd`) 
    VALUES ('{message.from_user.id}',
    '{message.from_user.username}',
    '{message.from_user.first_name}',
    '{message.from_user.last_name}',
    datetime('now'),datetime('now'));""")

    # upd user info
    await send_to_db(f"""UPDATE USER SET 
    `username` = '{message.from_user.username}',
    `first_name` = '{message.from_user.first_name}',
    `last_name` = '{message.from_user.last_name}',
    `upd` = datetime('now') 
    where `chatid`={message.from_user.id}
""")
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç —É–≤–∞–∂–∞–µ–º—ã–π {message.from_user.first_name}! 
–Ø –ø–æ–º–æ–≥—É —É—á–µ—Å—Ç—å –í–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã. 
    
–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help
""", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="test",
web_app=WebAppInfo(url="https://script.google.com/macros/s/AKfycby3lyo0yU4z2wPI6li2JK1N2w4J9UT52xQ3HwZcL9j_DdzlAx0/exec")))
                         )


@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/help`
    """
    await message.answer("""–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—è, 
    
–∂–º–∏ üëâ /start""")


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)
    # cur.execute("–í–ê–®-SQL-–ó–ê–ü–†–û–°-–ó–î–ï–°–¨;")
    chatid = message.from_user.id
    await send_to_db(f"""INSERT INTO log (`chatid`, `message`,`created`) 
               VALUES('{message.from_user.id}', '{message.text}',datetime('now'));""")
    await message.answer(f'–°–∞–º {message.text}',reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text=f"–°–∞–π—Ç {message.text}",
web_app=WebAppInfo(url=f"https://{message.text}"))))


@dp.message_handler(content_types="answerWebAppQuery") #–ø–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
def answer(WebAppInfo):
   print(WebAppInfo) #–≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
   print(WebAppInfo.web_app_data.data) #–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–æ —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –±–æ—Ç–∞
   bot.send_message(WebAppInfo.chat.id, f"–ø–æ–ª—É—á–∏–ª–∏ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {WebAppInfo.web_app_data.data}")
   #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
